#include<LiquidCrystal.h>
LiquidCrystal lcd(4, 5, 6, 7, 8, 9);
#define echoPin 2
#define trigPin 3
#define IR 10
#define gas A0
long duration;
int distance,Gas,ir;
#define Buzzer 11
String msg;
void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(IR, INPUT);
  pinMode(gas, INPUT);
  pinMode(Buzzer, OUTPUT);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SMART GARBAGE");
  lcd.setCursor(0, 1);
  lcd.print(" MONITORING ");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("  SYSTEM  ");
  delay(2000);

}
void loop()
{
   Gas = analogRead(gas);
 ir = digitalRead(IR);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = (duration * 0.034 / 2);
  Serial.print("Distance : ");
  Serial.println(distance);
  Serial.println(" cm ");
  Serial.println("Gas value: ");
  Serial.println(Gas);
  Serial.println("IR value: ");
  Serial.println(ir);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("DISTANCE: ");
  lcd.print(distance);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Gas Value: ");
  lcd.print(Gas);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IR value : ");
  lcd.print(ir);
  delay(1000);
  if (Gas > 350)
  {
    digitalWrite(Buzzer, HIGH);
    Serial.print("Gas value increased");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Harmful gases");
    lcd.setCursor(0, 1);
    lcd.print("Detected");
    delay(1000);
    digitalWrite(Buzzer, LOW);
    msg = "Harmfull gases detected";
    SEND_MSG();
  }

  if (distance < 5)
  {
    digitalWrite(Buzzer, HIGH);
    Serial.print("Dustbin is full");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("DUSTBIN IS FULL");
    delay(1000);
    digitalWrite(Buzzer, LOW);
    msg = "Dustbin is full";
    SEND_MSG();

  }
  if (ir == 0)
  {
    digitalWrite(Buzzer, HIGH);
    Serial.print("outside dust detected");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(" Outside Dust ");
    lcd.setCursor(0, 1);
    lcd.print(" Detected");
    delay(1000);
    digitalWrite(Buzzer, LOW);
  }
  else
  {
    digitalWrite(Buzzer, LOW);

  }
}

void SEND_MSG()
{
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGS=\"+917019974193\"\r");
  delay(1000);
  Serial.println(msg);
  delay(1000);
  Serial.println((char)26);
  delay(1000);
  GPRS_SEND();
}
void GPRS_SEND() 
{
  Serial.println("AT");
  delay(1000);
  Serial.println("AT+CPIN?");//check for sim
  delay(1000);
  Serial.println("AT+CREG?"); // checking sim registeration
  delay(1000);
  Serial.println("AT+CGATT?");//checking if MS is connected to GPRS
  delay(1000);
  Serial.println("AT+CIPSHUT"); //close the connection
  delay(1000);
  Serial.println("AT+CIPSTATUS"); // current connection status
  delay(2000);
  Serial.println("AT+CIPMUX=0");// start multiconnection
  delay(2000);
  Serial.println("AT+CSTT=\"airtelgprs.com\"");// APN of the sim
  delay(1000);
  Serial.println("AT+CIICR ");// start wireless connection with GPRS
  delay(3000);
  Serial.println("AT+CIFSR ");//get local IP address
  delay(1000);
  Serial.println("AT+CIPSPRT=0");
  delay(3000);
  Serial.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"");// start TCP connection AT+HTTPPARA=\"URL\",\"api.thingspeak.com/update\"
  delay(5000);
  Serial.println("AT+CIPSEND");// send data through TCP/UDP connection
  delay(5000);
  //String str="GET https://api.thingspeak.com/update?api_key=PESQLADSZ6S92RM0&field1=" +String(humidity)+"&field2=" +String(temp);
  String str = "GET https://api.thingspeak.com/update?api_key=O5S6PKWZ6F2OKH16&field1=" + String(Gas)+"&field2=" +String(distance)+"&field3=" +String(ir);
  //GET https://api.thingspeak.com/update?api_key=3PD6EB7H1PECZIT6&field1=0
  Serial.print(str);
  Serial.println();
  delay(3000);
  Serial.write(26);
  delay(1000);
  Serial.println();
  Serial.println("AT+CIPSHUT");// close the connection
  delay(1000); 
}
